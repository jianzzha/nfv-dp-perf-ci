#!/usr/bin/env bash

set -eux -o pipefail

# Prepare ansible inventory file
echo "[undercloud]" | tee -a hosts
echo "${UNDERCLOUD} ansible_user=root ansible_ssh_pass=${SSH_PASSWORD}" | tee -a hosts
echo "[trafficgen]" | tee -a hosts
# if trafficgen is on baremetal host, same root password is assumed
if [[ ${TREX_RUN_FROM} == "baremetal"* ]]; then
    echo "${TREX_HOST} ansible_user=root ansible_ssh_pass=${SSH_PASSWORD}" | tee -a hosts
fi

cat << EOF > vars.yaml
---
DISABLE_CVE: ${DISABLE_CVE}
DATA_NIC_1: ${DATA_NIC_1}
DATA_NIC_2: ${DATA_NIC_2}
TEST_ITEM: ${TEST_ITEM}
UNDERCLOUD: ${UNDERCLOUD}
TREX_HOST: ${TREX_HOST}
DOCKER_IMG_TAG: ${DOCKER_IMG_TAG}
DEPLOY_PORT: ${DEPLOY_PORT}
COMPUTE_CONTROL_PORT: ${COMPUTE_CONTROL_PORT}
CONTROLLER_CONTROL_PORT: ${CONTROLLER_CONTROL_PORT}
CONTROLLER_ACCESS_PORT: ${CONTROLLER_ACCESS_PORT}
COMPUTE_ACCESS_PORT: ${COMPUTE_ACCESS_PORT}
SSH_PASSWORD: ${SSH_PASSWORD}
TREX_RUN_FROM: ${TREX_RUN_FROM:-baremetal_without_UC}
VM_IMAGE_URL: ${VM_IMAGE_URL}
ACCESS_NETWORK_TYPE: ${ACCESS_NETWORK_TYPE}
ACCESS_NETWORK_VLAN: ${ACCESS_NETWORK_VLAN}
DATA_NETWORK_TYPE: ${DATA_NETWORK_TYPE}
DATA_NETWORK_VLAN_1: ${DATA_NETWORK_VLAN_1}
DATA_NETWORK_VLAN_2: ${DATA_NETWORK_VLAN_2}
PACKET_LOSS_RATIO: ${PACKET_LOSS_RATIO}
PACKET_SIZE: ${PACKET_SIZE}
SEARCH_TIME: ${SEARCH_TIME}
VALIDATION_TIME: ${VALIDATION_TIME}
FLOWS: ${FLOWS}
TREX_PCI_ADDR_NIC_1: ${TREX_PCI_ADDR_NIC_1}
TREX_PCI_ADDR_NIC_2: ${TREX_PCI_ADDR_NIC_2}
FIX_TUNED_AFTER_DEPLOY: ${FIX_TUNED_AFTER_DEPLOY}
CPU_ALLOCATION: ${CPU_ALLOCATION}
ENABLE_HT: ${ENABLE_HT}
ISOLATED_CPU_LIST: ${ISOLATED_CPU_LIST}
NOVA_CPU_LIST: ${NOVA_CPU_LIST}
REPIN_OVS_PMD: ${REPIN_OVS_PMD}
REPIN_EMULATOR: ${REPIN_EMULATOR}
PMD_ACCESS_ETH: ${PMD_ACCESS_ETH}
PMD_ACCESS_DPDK: ${PMD_ACCESS_DPDK}
PMD_DATA_ETH0: ${PMD_DATA_ETH0}
PMD_DATA_DPDK0: ${PMD_DATA_DPDK0}
PMD_DATA_ETH1: ${PMD_DATA_ETH1}
PMD_DATA_DPDK1: ${PMD_DATA_DPDK1}
PMD_CORE_LIST: ${PMD_DATA_ETH0},${PMD_DATA_ETH1},${PMD_DATA_DPDK0},${PMD_DATA_DPDK1}
OVS_LCORE: ${OVS_LCORE}
EOF

chmod u+x cpu_allocation.py
if [[ ${CPU_ALLOCATION} == "same_as_trex" ]]; then
    ansible-playbook -i hosts -e "baremetal=trafficgen" get_cpuinfo.yaml
elif [[ ${CPU_ALLOCATION} == "same_as_undercloud" ]]; then
    ansible-playbook -i hosts -e "baremetal=undercloud" get_cpuinfo.yaml
fi
 
if [[ ${CPU_ALLOCATION} != "manual" ]]; then
    ./cpu_allocation.py ci_sysinfo.yaml cpu_resource.out
    source cpu_resource.out
    sed -i -e "s/ISOLATED_CPU_LIST: .*/ISOLATED_CPU_LIST: ${ISOLATED_CPU_LIST}/" vars.yaml
    sed -i -e "s/NOVA_CPU_LIST: .*/NOVA_CPU_LIST: ${NOVA_CPU_LIST}/" vars.yaml

    # decide if hyperthreading enabled based on how many thread per core collected from remote
    if [[ ${THREAD_PER_CORE} == "2" ]]; then
        ENABLE_HT=true
    else
        ENABLE_HT=false
    fi
    sed -i -e "s/ENABLE_HT: .*/ENABLE_HT: ${ENABLE_HT}/" vars.yaml

    if [[ ${PMD_DATA_ETH0:-x} != 'x' ]]; then
        sed -i -e "s/PMD_ACCESS_ETH: .*/PMD_ACCESS_ETH: ${PMD_ACCESS_ETH}/" vars.yaml
        sed -i -e "s/PMD_ACCESS_DPDK: .*/PMD_ACCESS_DPDK: ${PMD_ACCESS_DPDK}/" vars.yaml
        sed -i -e "s/PMD_DATA_ETH0: .*/PMD_DATA_ETH0: ${PMD_DATA_ETH0}/" vars.yaml
        sed -i -e "s/PMD_DATA_DPDK0: .*/PMD_DATA_DPDK0: ${PMD_DATA_DPDK0}/" vars.yaml
        sed -i -e "s/PMD_DATA_ETH1: .*/PMD_DATA_ETH1: ${PMD_DATA_ETH1}/" vars.yaml
        sed -i -e "s/PMD_DATA_DPDK1: .*/PMD_DATA_DPDK1: ${PMD_DATA_DPDK1}/" vars.yaml
        sed -i -e "s/PMD_CORE_LIST: .*/PMD_CORE_LIST: ${PMD_DATA_ETH0},${PMD_DATA_ETH1},${PMD_DATA_DPDK0},${PMD_DATA_DPDK1}/" vars.yaml
        sed -i -e "s/OVS_LCORE: .*/OVS_LCORE: ${OVS_LCORE}/" vars.yaml
    fi
fi

cat vars.yaml | sed -e '/---/d' -e 's/: /=/' > parameters
 
